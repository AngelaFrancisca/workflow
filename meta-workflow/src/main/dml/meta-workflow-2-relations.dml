package module.metaWorkflow.domain;
/*
 * @(#)domain_model_metaWorkflow_2.dml
 *
 * Copyright 2009 Instituto Superior Tecnico
 * Founding Authors: Jo√£o Figueiredo, Luis Cruz, Paulo Abrantes, Susana Fernandes
 * 
 *      https://fenix-ashes.ist.utl.pt/
 * 
 *   This file is part of the MyOrg web application infrastructure.
 *
 *   MyOrg is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published
 *   by the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.*
 *
 *   MyOrg is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with MyOrg. If not, see <http://www.gnu.org/licenses/>.
 * 
 */



relation WorkflowUnitQueueUnit {
	WorkflowUnitQueue playsRole queues {
		multiplicity *;
	}
	.module.organization.domain.Unit playsRole unit;
}

relation WorkflowUnitQueueAccountabilityType {
	WorkflowUnitQueue playsRole usedQueues {
		multiplicity *;
	}
	.module.organization.domain.AccountabilityType playsRole accountabilityTypes {
		multiplicity *;
	}
}

relation WorkflowQueueWorkflowMetaType {
	.module.workflow.domain.WorkflowQueue playsRole queues {
		multiplicity *;
	}
	WorkflowMetaType playsRole metaType;
}
 
relation WorkflowMetaTypeAccountabilityType {
	WorkflowMetaType playsRole workflowMetaTypes {
		multiplicity *;
	}
	.module.organization.domain.AccountabilityType playsRole supportedAccountabilityTypes {
		multiplicity *;
	}
}

relation RequestorWorkflowMetaProcess {
	WorkflowMetaProcess playsRole process {
		multiplicity *;
	}
	Requestor playsRole requestor;
}
 
relation UserRequestorUser {
	.pt.ist.bennu.core.domain.User playsRole user;
	Requestor playsRole requestor;
}

relation WorkflowMetaTypeOrganizationModel {
	WorkflowMetaType playsRole metaType {
		multiplicity *;
	}
	.module.organization.domain.OrganizationalModel playsRole organizationalModel;
}

//FENIX-345: refactor, remove this relation
relation WorkflowMetaProcessWorkflowMetaType {
	WorkflowMetaProcess playsRole metaProcesses {
		multiplicity *;
	}
	WorkflowMetaType playsRole metaType {
		multiplicity 1..1;
	}
}

//FENIX-345: refactor - added relation
relation WorkflowMetaProcessWorkflowMetaTypeVersion {
	WorkflowMetaProcess playsRole metaProcesses {
		multiplicity *;
	}
	WorkflowMetaTypeVersion playsRole metaTypeVersion;
}

//FENIX-345: refactor - added relation
relation WorkflowMetaTypeVersionWorkflowMetaType {
	WorkflowMetaTypeVersion playsRole versions {
		multiplicity *;
	}
	WorkflowMetaType playsRole metaType {
		multiplicity 1..1;
	}
}



relation WorkflowMetaProcessFieldSetValue {
	WorkflowMetaProcess playsRole process;
	FieldSetValue playsRole fieldSet {
		multiplicity 1..1;
	}
}


relation WorkflowSystemWorkflowMetaType {
	.module.workflow.domain.WorkflowSystem playsRole workflowSystem {
		multiplicity 1..1;
	}
	WorkflowMetaType playsRole metaTypes {
		multiplicity *;
	}
}

//FENIX-345: refactor - added relation
relation WorkflowSystemWorkflowMetaTypeVersion {
	.module.workflow.domain.WorkflowSystem playsRole workflowSystem;
	WorkflowMetaTypeVersion playsRole metaTypeVersions {
		multiplicity *;
	}
}

relation WorkflowSystemWorkflowMetaTypeDescription {
	.module.workflow.domain.WorkflowSystem playsRole workflowSystem;
	WorkflowMetaTypeDescription playsRole metaTypeDescriptions {
		multiplicity *;
	}
}

relation UserWorkflowMetaTypeDescription {
	.pt.ist.bennu.core.domain.User playsRole versionOwner;
	WorkflowMetaTypeDescription playsRole metaTypeDescriptions {
		multiplicity *;
	}
}

relation UserWorkflowMetaProcess {
	.pt.ist.bennu.core.domain.User playsRole creator;
	WorkflowMetaProcess playsRole metaProcesses {
		multiplicity *;
	}
}

relation MetaTypeObserver {

	.pt.ist.bennu.core.domain.User playsRole metaTypeObservers {
		multiplicity *;
	}
	WorkflowMetaType playsRole observedMetaTypes {
		multiplicity *;
	}
}


//CUT


relation WorkflowMetaTypeDescription {
	WorkflowMetaType playsRole metaType;
	WorkflowMetaTypeDescription playsRole descriptions {
		multiplicity *;
	}
}

relation WorkflowMetaTypeWorkflowMetaTypeSpecificLayout {
	WorkflowMetaType playsRole metaType;
	WorkflowMetaTypeSpecificLayout playsRole specificLayout;
}

relation WorkflowMetaTypeWorkflowMetaTypeSpecificActivity {
	WorkflowMetaType playsRole metaType;
	WorkflowMetaTypeSpecificActivity playsRole specificActivities {
		multiplicity *;
	}
}

relation WorkflowInitializerMyOrg {
	MetaWorkflowInitializer playsRole metaWorkflowInitializer;
	.pt.ist.bennu.core.domain.MyOrg playsRole myOrg;
}

//FENIX-345: refactor, remove this relation
relation WorkflowMetaTypeFieldSet {
	WorkflowMetaType playsRole metaType;
	MetaFieldSet playsRole fieldSet {
		multiplicity 0..1;
	}
}

//FENIX-345: refactor - added relation
relation WorkflowMetaTypeVersionFieldSet {
	WorkflowMetaTypeVersion playsRole metaTypeVersion;
	MetaFieldSet playsRole fieldSet {
		multiplicity 1..1;
	}
}
	

relation MetaFieldMetaFieldSet {
	MetaField playsRole childFields {
		multiplicity *;
	}
	MetaFieldSet playsRole parentFieldSet;
}

relation FieldValueFieldSetValue {
	FieldValue playsRole childFieldValues {
		multiplicity *;
	}
	FieldSetValue playsRole parentFieldSet;
}

relation FieldValueMetaField {
	MetaField playsRole metaField;
	FieldValue playsRole fieldValues {
		multiplicity *;
	}
}


//FENIX-345: refactor, remove this relation
relation WorkflowMetaTypeMetaProcessState {
	WorkflowMetaType playsRole workflowMetaType;
	MetaProcessState playsRole processStates {
		multiplicity *;
	}
}

//FENIX-345: refactor - added relation
relation WorkflowMetaTypeVersionMetaProcessState {
	WorkflowMetaTypeVersion playsRole workflowMetaTypeVersion;
	MetaProcessState playsRole processStates {
		multiplicity *;
	}
}
	
	
relation WorkflowMetaTypeVersionUser {
	WorkflowMetaTypeVersion playsRole publishedWorkflowMetaTypeVersions {
		multiplicity *;
	}
	.pt.ist.bennu.core.domain.User playsRole publisherOfVersion;
}

relation MetaProcessStateMetaProcessStateConfig {
	MetaProcessState playsRole metaProcessState;
	MetaProcessStateConfig playsRole configs {
		multiplicity *;
	}
}

relation MetaProcessStateConfigMetaProcessState {
	MetaProcessState playsRole dependedStates {
		multiplicity *;
	}
	MetaProcessStateConfig playsRole dependingConfigs {
		multiplicity *;
	}
}
relation MetaProcessStateConfigMetaField {
	MetaField playsRole dependedFields {
		multiplicity *;
	}
	MetaProcessStateConfig playsRole dependingStateConfigs {
		multiplicity *;
	}
}
